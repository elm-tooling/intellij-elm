package org.elm.lang.core.parser.manual

import com.intellij.lang.PsiBuilder
import com.intellij.lang.parser.GeneratedParserUtilBase


/**
 * Entry-points for manual/external parse rules to be called by the parser
 * generated by GrammarKit.
 *
 * In general, the reason we need manual parse rules is to handle cases
 * where Elm requires that there be no whitespace between certain tokens
 * (e.g. a "dotted" module name such as `Json.Encode`)
 */
object ElmManualParseRules : GeneratedParserUtilBase() {
    @JvmStatic
    @Suppress("unused")
    fun parseTupleOrParenExpr(builder: PsiBuilder, level: Int, exprParser: Parser) =
            TupleOrParenExprParser(exprParser).parse(builder, level)

    @JvmStatic
    @Suppress("unused")
    fun parseMinusWithoutTrailingWhitespace(builder: PsiBuilder, level: Int) =
            MinusWithoutTrailingWhitespaceParser.parse(builder, level)

    @JvmStatic
    @Suppress("unused")
    fun parseDotWithoutTrailingWhitespace(builder: PsiBuilder, level: Int) =
            DotWithoutWhitespaceParser(allowLeadingWs = true, allowTrailingWs = false).parse(builder, level)

    @JvmStatic
    @Suppress("unused")
    fun parseDotWithoutWhitespace(builder: PsiBuilder, level: Int) =
            DotWithoutWhitespaceParser(allowLeadingWs = false, allowTrailingWs = false).parse(builder, level)
}
